% see mmm.sty for implementation of newmeta etc

% macros for Clojure grammars
\usepackage{mathpartir}
\usepackage{mmm}
\usepackage{amsfonts}
\usepackage{bbm}
\usepackage{xcolor}
\usepackage{xspace}

% newmeta variables are automatically subscripted
% \x0, \x1, \x{}

%% metavariables

% expressions
\newmeta\M{M}
\newmeta\N{N}
\newmeta\P{P}
\newmeta\e{e}
\newmeta\ep{e'}
\newmeta\epp{e''}
\newmeta\expd{d}
\newmeta\ReflectiveExp{R}
\newmeta\NonReflectiveExp{E}
\newmeta\MultimethodExp{M}
\newmeta\HintedExp{H}
\newmeta\HashMapExp{G}

\newcommand\lambdatc{\ma{\lambda_{TC}}}

% we write a macro for every bit of abstract syntax.  That way they
% will all look the same!

% types
\newbfop\int{int}
\newbfop\Boolean{B}
\newbfop\Booleanlong{Boolean}
\newbfop\Booleanhint{Boolean}
\newbfop\IFn{Fn}
\newbfop\MultiFn{MultiFn}
\newbfop\PMulti{Multi}
\newbfop\IPersistentMapLiteral{Map}
\newbfop\MapLiteral{Map}
\newbfop\Uliteral{\ma{\bigcup}}
\newbfop\Iliteral{\ma{\bigcap}}
\newbfop\Not{Not}
\newbfop\Allliteral{All}
\newbfop\TFnliteral{TFn}
\newbfop\Valueliteral{Val}
\newbfop\ArrayTwoLiteral{Array2}
\newbfop\ArrayLiteral{Array}
\newbfop\ArrayPLiteral{ArrayP}
\newbfop\Throwable{Throwable}
\newbfop\Class{Class}
\newbfop\Object{Object}
\newbfop\Expr{Expr}
\newbfop\Order{Order}
\newbfop\Breakfast{Bf}
\newbfop\Lunch{Lu}
\newcommand\MultiFntype[2]{(\PMulti #1\ #2)}
\newcommand\proctype[2]{(#1 \to #2)}
\newcommand\EmptyUnion[0]{\ma{(\Uliteral)}}
\newcommand\Unionsplice[1]{(\ma{\Uliteral\ #1})}
\newcommand\Unionsplicenospace[1]{(\ma{\Uliteral #1})}
\newcommand\Union[2]{(\ma{\Uliteral\ #1\ #2})}
\newcommand\UnionNilNum[0]{\ma{\Union{\Nil}{\Number}}}
\newcommand\UnionNilFile[0]{\ma{\Union{\Nil}{\File}}}
\newcommand\In[1]{(\ma{\Iliteral\ #1})}
\newcommand\ArrayTwo[2]{(\ma{\ArrayTwoLiteral\ #1\ #2})}
\newcommand\Array[1]{(\ArrayLiteral #1)}
\newcommand\ArrayP[1]{(\ArrayPLiteral #1)}
% \proctype is a little overkill.
%% Reynolds' package can also abstract things like (\s1 \to \s2 \to \s3).
\newcommand\Arrow[4]{\ma{#1 \xrightarrow[#4]{#3} #2}}
% TODO figure out how to make #1 : #2 closer to the :
\newcommand\ArrowOne[5]{\ma{{\hastypesmall {#1} {#2}} \xrightarrow[#5]{#4} #3}}
\newcommand\ArrowOverright[5]{\ma{{\overrightarrow{\hastypesmall {#1} {#2}}} \xrightarrow[#5]{#4} #3}}
% minus filters and object, implicitly tt | tt; empty
\newcommand\ArrowTwo[3]{\ma{{\hastypesmall {#1} {#2}} \xrightarrow\ {#3}}}
% easy math mode overrightarrow
\newcommand\overr[1]{\ma{\overrightarrow{#1}}}

%\newcommand\getparent{\operatorfont{getParent}}
\newcommand\getx{getX}
\newcommand\coretyped{\texttt{core.typed}\xspace}
\newcommand\All[2]{(\ma{\Allliteral\ [#1]\ #2})}
\newcommand\TFn[2]{(\ma{\TFnliteral\ [#1]\ #2})}
\newcommand\Value[1]{(\ma{\Valueliteral #1})}
\newcommand\ValueFalse[0]{(\ma{\Valueliteral \false})}
\newcommand\ValueNil[0]{(\ma{\Valueliteral \nil})}
\newcommand\ValueTrue[0]{(\ma{\Valueliteral \true})}
\newcommand\ValueBool[0]{(\ma{\Valueliteral \bool{}})}
\newcommand\ValueClass[0]{(\ma{\Valueliteral \class{}})}
\newcommand\ValueKw[0]{(\ma{\Valueliteral \k{}})}
\newcommand\ValueStr[0]{(\ma{\Valueliteral \str{}})}
\newcommand\Valkw[1]{\ma{\Value{\makekw{#1}}}}
\newmeta\singletonmeta{l}
\newbfop\Top{\ma{\top}}
\newbfop\Bottom{\ma{\bot}}
\newbfop\Bot{\ma{\bot}}
\newbfop\Keyword{K}
\newbfop\Keywordlong{Keyword}
\newbfop\Keywordhint{Keyword}
\newbfop\Symbol{Symbol}
\newbfop\NumberFull{Nat}
\newbfop\Number{N}
\newbfop\Nil{nil}
\newbfop\True{true}
\newbfop\False{false}
\newbfop\falsy{(\ma{\cup\ \Nil\ \False})}
\newbfop\falsydiff{\ma{\trdiff{\falsy}}}
\newcommand\IPersistentMap[2]{(\ma{\IPersistentMapLiteral\ #1\ #2})}
\newcommand\Map[2]{(\ma{\MapLiteral #1\ #2})}
\newcommand\HMapInstance[0]{\ma{\IPersistentMapLiteral}}
\newbfop\HMapliteral{HMap}
\newmeta\completenessmeta{\mathcal{E}}
\newmeta\complete{\mathcal{C}}
\newmeta\partial{\mathcal{P}}
\newcommand\HMapcliteral[0]{\HMapliteral^{\complete{}}}
\newcommand\HMappliteral[0]{\HMapliteral^{\partial{}}}
\newcommand\HMapgenericliteral[0]{\HMapliteral^{\completenessmeta{}}}
\newcommand\HMapgeneric[2]{(\ma{\HMapgenericliteral #1\ #2})}
\newcommand\HMapc[1]{(\ma{\HMapcliteral #1})}
\newcommand\HMapcwithabsent[2]{(\ma{\HMapcliteral #1\ #2})}
\newcommand\HMapp[2]{(\ma{\HMappliteral #1\ #2})}
\newcommand\mandatoryentry[2]{\ma{{#1} \mapsto {#2}}}
\newcommand\mandatoryentrykwnoarrow[2]{\ma{\makekw{#1}\ {#2}}}
\newcommand\mandatoryentrynoarrow[2]{\ma{{#1}\ {#2}}}
\newcommand\mandatoryset[1]{\ma{\{#1\}}}
\newcommand\mandatorysetsingleton[2]{\ma{\mandatoryset{\mandatoryentry{#1}{#2}}}}
\newcommand\mandatorysetoverright[2]{\ma{\{\overrightarrow{\mandatoryentry{#1}{#2}}\}}}
\newcommand\notinmandatory[3]{\ma{#1 \not\in dom({#3})}}
\newcommand\inmandatory[3]{\ma{{#3}[{#1}] = {#2}}}
\newcommand\extendmandatoryset[3]{#1[\mandatoryentry{#2}{#3}]}
\newmeta\mandatory{\ma{\mathcal{M}}}
\newmeta\absent{\ma{\mathcal{A}}}
\newmeta\absentp{\ma{{\mathcal{A}}'}}
\newcommand\absentoverright[1]{\ma{\{{\overrightarrow{#1}}\}}}
\newcommand\emptyabsent[0]{\ma{\{\}}}
\newcommand\inabsent[2]{\ma{#1 \in #2}}
\newcommand\notinabsent[2]{\ma{#1 \not\in #2}}
\newcommand\extendabsentset[2]{\ma{({#1} \cup \{#2\})}}
\newbfop\Satisfiesliteral{Satisfies}
\newcommand\Satisfies[1]{(\ma{\Satisfiesliteral\ #1})}
\newbfop\Instanceliteral{InstanceOf}
\newcommand\Instance[1]{(\ma{\Instanceliteral\ #1})}
\newcommand\HVec[1]{[{#1}]}
\newcommand\makekw[1]{\ma{\metafunctionfont{\mathbin{:}#1}}}
\newcommand\makestr[1]{\ma{``{\metafunctionfont{#1}}"}}
\newcommand\makelocal[1]{\ma{#1}}
\newcommand\secref[1]{Section~\ref{#1}}
\newcommand\figref[1]{Figure~\ref{#1}}
\newcommand\egref[1]{Example~\ref{#1}}
\newcommand\lemref[1]{Lemma~\ref{#1}}

% terms
\newmeta\x{x}                   % not sure if \x is reserved...
\newmeta\xp{x{'}}                   % not sure if \x is reserved...
\newmeta\y{y}
\newmeta\z{z}
\newmeta\v{v}
\newmeta\vp{v'}
\newmeta\class{C}
\newmeta\classp{C{'}}
\newmeta\protocol{P}
\newmeta\k{k}
\newmeta\str{s}
\newmeta\num{n}
\newmeta\nat{n}
\newmeta\bool{b}
\newcommand\operatorfont[1]{\ma{{\mathsf{#1}}}}
\newcommand\literalfont[1]{\ma{{\mathsf{#1}}}}
\newcommand\nil[0]{{\literalfont{nil}}}
\newcommand\err[0]{{\literalfont{err}}}
\newcommand\true[0]{{\literalfont{true}}}
\newcommand\false[0]{{\literalfont{false}}}
\newcommand\zerohuhliteral[0]{{\operatorfont{zero?}}}
\newcommand\numberhuhliteral[0]{{\operatorfont{number?}}}
\newcommand\booleanhuhliteral[0]{{\operatorfont{boolean?}}}
\newcommand\nilhuhliteral[0]{{\operatorfont{nil?}}}
\newcommand\assocliteral[0]{{\operatorfont{assoc}}}
\newcommand\assocexp[3]{(\assocliteral{}\ #1\ #2\ #3)}
\newmeta\dissoc{dissoc}
\newmeta\getliteral{{\operatorfont{get}}}
\newcommand\getexp[2]{(\getliteral{}\ #1\ #2)}
\newcommand\ifliteral[0]{{\operatorfont{if}}}
\newcommand\abs[2]{\ma{\l #1 . #2}}
\newcommand\curlymap[1]{\ma{\{#1\}}}
\newcommand\emptymap[1]{\ma{\{\}}}
\newcommand\roundpair[2]{\ma{(#1, #2)}}
\newcommand\mapvalentry[2]{\ma{{#1} \mapsto {#2}}}
\newcommand\mapvalentrynoarrow[2]{\ma{{#1}\ {#2}}}
\newcommand\mapvalentrykwkey[2]{\ma{\makekw{#1} \mapsto {#2}}}
\newcommand\mapvalentrykwkeynoarrow[2]{\ma{\makekw{#1}\ {#2}}}
\newcommand\curlymapvaloverright[2]{\ma{\{{\overrightarrow{\mapvalentry{#1}{#2}}}\}}}
\newcommand\curlymapvaloverrightnoarrow[2]{\ma{\{{\overrightarrow{\mapvalentrynoarrow{#1}{#2}}}\}}}
\newcommand\extendmap[3]{\ma{#1[#2 \mapsto #3]}}
\newcommand\getmap[2]{\ma{#1[#2]}}
\newcommand\entryinmap[2]{\ma{{#1} \in {#2}}}
\newcommand\keyinmap[2]{\ma{{#1} \in dom({#2})}}
\newcommand\keynotinmap[2]{\ma{{#1} \not\in dom({#2})}}
\newcommand\comb[2]{\ma{(#1\ #2)}}
\newcommand\zeroliteral[0]{0}
\newcommand\ifexp[3]{\ma{(\ifliteral{}\ #1\ #2\ #3)}}
\newcommand\doexp[2]{\ma{(\doliteral{}\ #1\ #2)}}
\newcommand\letexp[3]{\ma{(\letliteral{}\ [\ma{#1\ #2}]\ #3)}}
\newcommand\appexp[2]{\ma{(#1\ #2)}}
\newcommand\appexpone[1]{\ma{(#1)}}
\newcommand\apptwoexp[3]{\ma{(#1\ #2\ #3)}}
\newcommand\throwexp[1]{\ma{(\throwliteral{}\ #1)}}
\newcommand\newexp[2]{\ma{(\newliteral{}\ #1 #2)}}
% deleted 2nd argument which is just the same as #3
\newcommand\newstaticexp[4]{\ma{({\newliteral}_{[#1]}\ #3\ #4)}}
\newcommand\dotliteral[0]{{\operatorfont{.}}}
\newcommand\fieldexp[2]{\ma{(\dotliteral\ #2\ #1)}}
\newcommand\fieldstaticexp[4]{\ma{(\dotliteral\ #4\ {#3}^{#1}_{#2})}}
\newcommand\methodexp[3]{\ma{(\dotliteral\ #2\ (#1 #3))}}
\newcommand\methodstaticexp[6]{\ma{(\dotliteral\ #5\ ({#4}^{#1}_{[[#2], #3]} #6))}}
\newcommand\createmultiexp[2]{\ma{(\defmultiliteral{}\ #1\ #2)}}
\newcommand\defmultiexp[2]{(\ma{\defmultiliteral{}\ #1\ #2})}
\newcommand\defmethodexp[4]{(\ma{\defmethodliteral{}\ #1\ #2\ [#3]\ #4})}
\newcommand\extendmultiexp[3]{(\ma{\defmethodliteral{}\ #1\ #2\ #3})}
\newmeta\defliteral{\textbf{def}}
\newcommand\defexp[2]{(\ma{\defliteral{}\ #1\ #2})}
\newcommand\wrong[0]{\ma{wrong}}
\newcommand\errorval[1]{\ma{\metafunctionfont{err}}}
\newcommand\errorvalv[0]{\errorval{\v{}}}
\newcommand\reflerror[0]{\errorval{refl}}
\newcommand\mmerror[0]{\errorval{mm}}
\newcommand\rtvector[1]{[{#1}]}
\newmeta\mapval{m}

% Java primitives
\newmeta\pint{int}
\newbfop\Integer{java.lang.Integer}
\newbfop\Int{Int}
\newmeta\plong{long}
\newbfop\Long{Long}
\newmeta\pdouble{double}
\newbfop\Double{java.lang.Double}
\newmeta\pchar{char}
\newbfop\Character{java.lang.Character}
\newmeta\pvoid{void}
\newbfop\Void{Void}
\newbfop\File{F}
\newbfop\FileFull{File}
\newbfop\Point{Point}
\newbfop\String{S}
\newbfop\StringFull{String}
\newmeta\mth{mth}
\newmeta\fld{fld}

% Clojure values
\newmeta\symbol{symbol}
\newmeta\nat{n}

% constant calls
\newbfop\ccclass{class}
\newcommand\instanceliteral[0]{\operatorfont{instance?}}
\newcommand\isaliteral[0]{{\operatorfont{isa?}}}
\newcommand\instanceapp[2]{{(\instanceliteral\ #1\ #2)}}
\newcommand\isaapp[2]{(\isaliteral\ #1\ #2)}
\newcommand\equivliteral[0]{\ma{=}}
\newcommand\equivapp[2]{(\equivliteral\ #1\ #2)}

% constant typing
\newcommand\constanttypeliteral[0]{\ma{{\delta}_{\t{}}}}
\newcommand\constantopsemliteral[0]{\ma{\delta}}
\newcommand\constanttypetwo[2]{\ma{\constanttypeliteral{}(#2)}}
\newcommand\constanttype[1]{\constanttypetwo{\t{}}{#1}}
\newcommand\constantopsem[2]{\ma{{\constantopsemliteral}(#1, #2)}}
\newcommand\classconst[0]{\emph{class}}
\newcommand\throwconst[0]{\emph{throw}}
\newcommand\numberhuh[0]{\emph{n?}}
\newcommand\inc[0]{\emph{inc}}

% differences from TR
%\newcommand\trdiff[1]{\mathbin{\textcolor{blue}{#1}}}
\newcommand\trdiff[1]{#1}

% update function
\newcommand\metafunctionfont[1]{{\mathsf{#1}}}
\newcommand\updateliteral[0]{\ma{\metafunctionfont{update}}}
\newcommand\update[3]{\updateliteral({#1}, {#2}, {#3})}
\newcommand\restrictliteral[0]{\ma{\metafunctionfont{restrict}}}
\newcommand\restrict[2]{\restrictliteral(#1, #2)}
\newcommand\removeliteral[0]{\ma{\metafunctionfont{remove}}}
\newcommand\remove[2]{\removeliteral(#1, #2)}
\newcommand\emptypath[0]{\ma{\epsilon}}

% class table
\newcommand\ct[0]{\ma{\mathcal{CT}}}
\newmeta\ctentrymeta{ce}
\newmeta\ctmethod{m}
\newmeta\ctfield{f}
\newmeta\ctctor{c}
\newcommand\inct[2]{\ma{#1 \in #2}}
\newcommand\ctmethodsliteral[0]{\metafunctionfont{m}}
\newcommand\ctfieldsliteral[0]{\metafunctionfont{f}}
\newcommand\ctconstructorsliteral[0]{\metafunctionfont{c}}
\newcommand\ctmthentry[3]{\ma{#1 \mapsto [[#2], #3]}}
\newcommand\ctfldentry[2]{\ma{#1 \mapsto #2}}
\newcommand\ctctorentry[1]{\ma{[#1]}}
\newcommand\set[1]{\ma{\{#1\}}}
% WARNING specific formatting for figure
\newcommand\ctlookup[2]{\ma{{#1}[#2]}}
\newcommand\ctlookuptwo[3]{\ma{\ctlookup{{\ctlookup{#1}{#2}}}{#3}}}
\newcommand\ctlookupmethods[2]{\ma{\ctlookuptwo{#1}{#2}{\ctmethodsliteral}}}
\newcommand\ctlookupfields[2]{\ma{\ctlookuptwo{#1}{#2}{\ctfieldsliteral}}}
\newcommand\ctlookupctors[2]{\ma{\ctlookuptwo{#1}{#2}{\ctconstructorsliteral}}}

% typing judgements
\newcommand\rewrites[2]{#1 \Rightarrow #2}
\newcommand\hastype[2]{\ma{#1 \mathbin{:} #2}}
\newcommand\hastypesmall[2]{\ma{#1 {:} #2}}
\newcommand\issubtype[2]{\ma{#1 \mathbin{<:} #2}}
\newcommand\issubtypein[3]{\ma{{\inpropenv{#1} {#2 \mathbin{<:} #3}}}}
\newcommand\issubobjin[3]{\ma{{\inpropenv{#1} {#2 \mathbin{<:} #3}}}}
\newcommand\notsubtypein[3]{\ma{{\inpropenv{#1} {#2 \mathbin{\not<:} #3}}}}
% 5 place relation (TR formalism)
\newcommand\judgement[5]{\ma{#1 \vdash {\hastype{#2}{#3}} \ ;\ #4\ ;\ #5}}
% 6 place relation (w/ rewrite)
\newcommand\judgementselfrewrite[5]{\ma{#1 \vdash {\hastype{#2}{#3}}\ ;\ #4\ ;\ #5}}
\newcommand\judgementrewrite[6]{\ma{#1 \vdash {\hastype{\rewrites{#2}{#6}}{#3}}\ ;\ #4\ ;\ #5}}
%\newcommand\judgementsev[7]{\ma{#3 \vdash_{\scriptscriptstyle{\trdiff{\ct{}}}} #4\ ;\ #5\ ;\ #6}}
% lookuping props in the env
% 2 place relation (same as tt | tt; empty)
\newcommand\judgementtwo[3]{\ma{#1 \vdash {\hastype{#2}{#3}}}}
\newcommand\judgementtworewrite[4]{\ma{#1 \vdash {\hastype{\rewrites{#2}{#4}}{#3}} }}
\newcommand\inpropenv[2]{\ma{#1 \vdash #2}}

% operational semantics
\newmeta\openv{\rho}
\newmeta\openvp{\rho'}
\newcommand\inopenvnoeq[2]{\ma{#1 (#2)}}
\newcommand\inopenv[3]{\ma{#1 (#2) = #3}}
\newcommand\inopenvalign[3]{\ma{#1 (#2) &=& #3}}
\newcommand\notinopenv[2]{\ma{#2 \not\in dom(#1)}}
\newcommand\extendopenv[3]{\ma{#1[#2 \mapsto #3]}}
\newcommand\opsem[3]{\ma{#1 \vdash #2 \Downarrow #3}}
\newcommand\notopsem[3]{\ma{#1 \not\vdash #2 \Downarrow #3}}
\newcommand\closure[2]{\ma{[#1, #2]}}
